// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserEquipment is an object representing the database table.
type UserEquipment struct {
	ID          uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      uint64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	EquipmentID uint64    `boil:"equipment_id" json:"equipment_id" toml:"equipment_id" yaml:"equipment_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userEquipmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userEquipmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserEquipmentColumns = struct {
	ID          string
	UserID      string
	EquipmentID string
	CreatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	EquipmentID: "equipment_id",
	CreatedAt:   "created_at",
}

var UserEquipmentTableColumns = struct {
	ID          string
	UserID      string
	EquipmentID string
	CreatedAt   string
}{
	ID:          "user_equipments.id",
	UserID:      "user_equipments.user_id",
	EquipmentID: "user_equipments.equipment_id",
	CreatedAt:   "user_equipments.created_at",
}

// Generated where

var UserEquipmentWhere = struct {
	ID          whereHelperuint64
	UserID      whereHelperuint64
	EquipmentID whereHelperuint64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperuint64{field: "`user_equipments`.`id`"},
	UserID:      whereHelperuint64{field: "`user_equipments`.`user_id`"},
	EquipmentID: whereHelperuint64{field: "`user_equipments`.`equipment_id`"},
	CreatedAt:   whereHelpertime_Time{field: "`user_equipments`.`created_at`"},
}

// UserEquipmentRels is where relationship names are stored.
var UserEquipmentRels = struct {
}{}

// userEquipmentR is where relationships are stored.
type userEquipmentR struct {
}

// NewStruct creates a new relationship struct
func (*userEquipmentR) NewStruct() *userEquipmentR {
	return &userEquipmentR{}
}

// userEquipmentL is where Load methods for each relationship are stored.
type userEquipmentL struct{}

var (
	userEquipmentAllColumns            = []string{"id", "user_id", "equipment_id", "created_at"}
	userEquipmentColumnsWithoutDefault = []string{"user_id", "equipment_id"}
	userEquipmentColumnsWithDefault    = []string{"id", "created_at"}
	userEquipmentPrimaryKeyColumns     = []string{"id"}
	userEquipmentGeneratedColumns      = []string{}
)

type (
	// UserEquipmentSlice is an alias for a slice of pointers to UserEquipment.
	// This should almost always be used instead of []UserEquipment.
	UserEquipmentSlice []*UserEquipment
	// UserEquipmentHook is the signature for custom UserEquipment hook methods
	UserEquipmentHook func(context.Context, boil.ContextExecutor, *UserEquipment) error

	userEquipmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userEquipmentType                 = reflect.TypeOf(&UserEquipment{})
	userEquipmentMapping              = queries.MakeStructMapping(userEquipmentType)
	userEquipmentPrimaryKeyMapping, _ = queries.BindMapping(userEquipmentType, userEquipmentMapping, userEquipmentPrimaryKeyColumns)
	userEquipmentInsertCacheMut       sync.RWMutex
	userEquipmentInsertCache          = make(map[string]insertCache)
	userEquipmentUpdateCacheMut       sync.RWMutex
	userEquipmentUpdateCache          = make(map[string]updateCache)
	userEquipmentUpsertCacheMut       sync.RWMutex
	userEquipmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userEquipmentAfterSelectMu sync.Mutex
var userEquipmentAfterSelectHooks []UserEquipmentHook

var userEquipmentBeforeInsertMu sync.Mutex
var userEquipmentBeforeInsertHooks []UserEquipmentHook
var userEquipmentAfterInsertMu sync.Mutex
var userEquipmentAfterInsertHooks []UserEquipmentHook

var userEquipmentBeforeUpdateMu sync.Mutex
var userEquipmentBeforeUpdateHooks []UserEquipmentHook
var userEquipmentAfterUpdateMu sync.Mutex
var userEquipmentAfterUpdateHooks []UserEquipmentHook

var userEquipmentBeforeDeleteMu sync.Mutex
var userEquipmentBeforeDeleteHooks []UserEquipmentHook
var userEquipmentAfterDeleteMu sync.Mutex
var userEquipmentAfterDeleteHooks []UserEquipmentHook

var userEquipmentBeforeUpsertMu sync.Mutex
var userEquipmentBeforeUpsertHooks []UserEquipmentHook
var userEquipmentAfterUpsertMu sync.Mutex
var userEquipmentAfterUpsertHooks []UserEquipmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserEquipment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserEquipment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserEquipment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserEquipment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserEquipment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserEquipment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserEquipment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserEquipment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserEquipment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userEquipmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserEquipmentHook registers your hook function for all future operations.
func AddUserEquipmentHook(hookPoint boil.HookPoint, userEquipmentHook UserEquipmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userEquipmentAfterSelectMu.Lock()
		userEquipmentAfterSelectHooks = append(userEquipmentAfterSelectHooks, userEquipmentHook)
		userEquipmentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userEquipmentBeforeInsertMu.Lock()
		userEquipmentBeforeInsertHooks = append(userEquipmentBeforeInsertHooks, userEquipmentHook)
		userEquipmentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userEquipmentAfterInsertMu.Lock()
		userEquipmentAfterInsertHooks = append(userEquipmentAfterInsertHooks, userEquipmentHook)
		userEquipmentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userEquipmentBeforeUpdateMu.Lock()
		userEquipmentBeforeUpdateHooks = append(userEquipmentBeforeUpdateHooks, userEquipmentHook)
		userEquipmentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userEquipmentAfterUpdateMu.Lock()
		userEquipmentAfterUpdateHooks = append(userEquipmentAfterUpdateHooks, userEquipmentHook)
		userEquipmentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userEquipmentBeforeDeleteMu.Lock()
		userEquipmentBeforeDeleteHooks = append(userEquipmentBeforeDeleteHooks, userEquipmentHook)
		userEquipmentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userEquipmentAfterDeleteMu.Lock()
		userEquipmentAfterDeleteHooks = append(userEquipmentAfterDeleteHooks, userEquipmentHook)
		userEquipmentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userEquipmentBeforeUpsertMu.Lock()
		userEquipmentBeforeUpsertHooks = append(userEquipmentBeforeUpsertHooks, userEquipmentHook)
		userEquipmentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userEquipmentAfterUpsertMu.Lock()
		userEquipmentAfterUpsertHooks = append(userEquipmentAfterUpsertHooks, userEquipmentHook)
		userEquipmentAfterUpsertMu.Unlock()
	}
}

// One returns a single userEquipment record from the query.
func (q userEquipmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserEquipment, error) {
	o := &UserEquipment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for user_equipments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserEquipment records from the query.
func (q userEquipmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserEquipmentSlice, error) {
	var o []*UserEquipment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UserEquipment slice")
	}

	if len(userEquipmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserEquipment records in the query.
func (q userEquipmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count user_equipments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userEquipmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if user_equipments exists")
	}

	return count > 0, nil
}

// UserEquipments retrieves all the records using an executor.
func UserEquipments(mods ...qm.QueryMod) userEquipmentQuery {
	mods = append(mods, qm.From("`user_equipments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_equipments`.*"})
	}

	return userEquipmentQuery{q}
}

// FindUserEquipment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserEquipment(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*UserEquipment, error) {
	userEquipmentObj := &UserEquipment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_equipments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userEquipmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from user_equipments")
	}

	if err = userEquipmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userEquipmentObj, err
	}

	return userEquipmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserEquipment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_equipments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userEquipmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userEquipmentInsertCacheMut.RLock()
	cache, cached := userEquipmentInsertCache[key]
	userEquipmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userEquipmentAllColumns,
			userEquipmentColumnsWithDefault,
			userEquipmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userEquipmentType, userEquipmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userEquipmentType, userEquipmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_equipments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_equipments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_equipments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userEquipmentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into user_equipments")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userEquipmentMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for user_equipments")
	}

CacheNoHooks:
	if !cached {
		userEquipmentInsertCacheMut.Lock()
		userEquipmentInsertCache[key] = cache
		userEquipmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserEquipment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserEquipment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userEquipmentUpdateCacheMut.RLock()
	cache, cached := userEquipmentUpdateCache[key]
	userEquipmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userEquipmentAllColumns,
			userEquipmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update user_equipments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_equipments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userEquipmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userEquipmentType, userEquipmentMapping, append(wl, userEquipmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update user_equipments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for user_equipments")
	}

	if !cached {
		userEquipmentUpdateCacheMut.Lock()
		userEquipmentUpdateCache[key] = cache
		userEquipmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userEquipmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for user_equipments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for user_equipments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserEquipmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEquipmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_equipments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEquipmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in userEquipment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all userEquipment")
	}
	return rowsAff, nil
}

var mySQLUserEquipmentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserEquipment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_equipments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userEquipmentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserEquipmentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userEquipmentUpsertCacheMut.RLock()
	cache, cached := userEquipmentUpsertCache[key]
	userEquipmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userEquipmentAllColumns,
			userEquipmentColumnsWithDefault,
			userEquipmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userEquipmentAllColumns,
			userEquipmentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert user_equipments, could not build update column list")
		}

		ret := strmangle.SetComplement(userEquipmentAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_equipments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_equipments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userEquipmentType, userEquipmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userEquipmentType, userEquipmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for user_equipments")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userEquipmentMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userEquipmentType, userEquipmentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for user_equipments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for user_equipments")
	}

CacheNoHooks:
	if !cached {
		userEquipmentUpsertCacheMut.Lock()
		userEquipmentUpsertCache[key] = cache
		userEquipmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserEquipment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserEquipment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UserEquipment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userEquipmentPrimaryKeyMapping)
	sql := "DELETE FROM `user_equipments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from user_equipments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for user_equipments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userEquipmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no userEquipmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from user_equipments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_equipments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserEquipmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userEquipmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEquipmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_equipments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEquipmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from userEquipment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_equipments")
	}

	if len(userEquipmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserEquipment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserEquipment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserEquipmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserEquipmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userEquipmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_equipments`.* FROM `user_equipments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userEquipmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UserEquipmentSlice")
	}

	*o = slice

	return nil
}

// UserEquipmentExists checks if the UserEquipment row exists.
func UserEquipmentExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_equipments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if user_equipments exists")
	}

	return exists, nil
}

// Exists checks if the UserEquipment row exists.
func (o *UserEquipment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserEquipmentExists(ctx, exec, o.ID)
}
