// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserQuest is an object representing the database table.
type UserQuest struct {
	ID          uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      uint64    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	QuestID     uint64    `boil:"quest_id" json:"quest_id" toml:"quest_id" yaml:"quest_id"`
	IsCompleted bool      `boil:"is_completed" json:"is_completed" toml:"is_completed" yaml:"is_completed"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userQuestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userQuestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserQuestColumns = struct {
	ID          string
	UserID      string
	QuestID     string
	IsCompleted string
	CreatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	QuestID:     "quest_id",
	IsCompleted: "is_completed",
	CreatedAt:   "created_at",
}

var UserQuestTableColumns = struct {
	ID          string
	UserID      string
	QuestID     string
	IsCompleted string
	CreatedAt   string
}{
	ID:          "user_quests.id",
	UserID:      "user_quests.user_id",
	QuestID:     "user_quests.quest_id",
	IsCompleted: "user_quests.is_completed",
	CreatedAt:   "user_quests.created_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var UserQuestWhere = struct {
	ID          whereHelperuint64
	UserID      whereHelperuint64
	QuestID     whereHelperuint64
	IsCompleted whereHelperbool
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperuint64{field: "`user_quests`.`id`"},
	UserID:      whereHelperuint64{field: "`user_quests`.`user_id`"},
	QuestID:     whereHelperuint64{field: "`user_quests`.`quest_id`"},
	IsCompleted: whereHelperbool{field: "`user_quests`.`is_completed`"},
	CreatedAt:   whereHelpertime_Time{field: "`user_quests`.`created_at`"},
}

// UserQuestRels is where relationship names are stored.
var UserQuestRels = struct {
}{}

// userQuestR is where relationships are stored.
type userQuestR struct {
}

// NewStruct creates a new relationship struct
func (*userQuestR) NewStruct() *userQuestR {
	return &userQuestR{}
}

// userQuestL is where Load methods for each relationship are stored.
type userQuestL struct{}

var (
	userQuestAllColumns            = []string{"id", "user_id", "quest_id", "is_completed", "created_at"}
	userQuestColumnsWithoutDefault = []string{"user_id", "quest_id", "is_completed"}
	userQuestColumnsWithDefault    = []string{"id", "created_at"}
	userQuestPrimaryKeyColumns     = []string{"id"}
	userQuestGeneratedColumns      = []string{}
)

type (
	// UserQuestSlice is an alias for a slice of pointers to UserQuest.
	// This should almost always be used instead of []UserQuest.
	UserQuestSlice []*UserQuest
	// UserQuestHook is the signature for custom UserQuest hook methods
	UserQuestHook func(context.Context, boil.ContextExecutor, *UserQuest) error

	userQuestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userQuestType                 = reflect.TypeOf(&UserQuest{})
	userQuestMapping              = queries.MakeStructMapping(userQuestType)
	userQuestPrimaryKeyMapping, _ = queries.BindMapping(userQuestType, userQuestMapping, userQuestPrimaryKeyColumns)
	userQuestInsertCacheMut       sync.RWMutex
	userQuestInsertCache          = make(map[string]insertCache)
	userQuestUpdateCacheMut       sync.RWMutex
	userQuestUpdateCache          = make(map[string]updateCache)
	userQuestUpsertCacheMut       sync.RWMutex
	userQuestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userQuestAfterSelectMu sync.Mutex
var userQuestAfterSelectHooks []UserQuestHook

var userQuestBeforeInsertMu sync.Mutex
var userQuestBeforeInsertHooks []UserQuestHook
var userQuestAfterInsertMu sync.Mutex
var userQuestAfterInsertHooks []UserQuestHook

var userQuestBeforeUpdateMu sync.Mutex
var userQuestBeforeUpdateHooks []UserQuestHook
var userQuestAfterUpdateMu sync.Mutex
var userQuestAfterUpdateHooks []UserQuestHook

var userQuestBeforeDeleteMu sync.Mutex
var userQuestBeforeDeleteHooks []UserQuestHook
var userQuestAfterDeleteMu sync.Mutex
var userQuestAfterDeleteHooks []UserQuestHook

var userQuestBeforeUpsertMu sync.Mutex
var userQuestBeforeUpsertHooks []UserQuestHook
var userQuestAfterUpsertMu sync.Mutex
var userQuestAfterUpsertHooks []UserQuestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserQuest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserQuest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserQuest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserQuest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserQuest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserQuest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserQuest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserQuest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserQuest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userQuestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserQuestHook registers your hook function for all future operations.
func AddUserQuestHook(hookPoint boil.HookPoint, userQuestHook UserQuestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userQuestAfterSelectMu.Lock()
		userQuestAfterSelectHooks = append(userQuestAfterSelectHooks, userQuestHook)
		userQuestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userQuestBeforeInsertMu.Lock()
		userQuestBeforeInsertHooks = append(userQuestBeforeInsertHooks, userQuestHook)
		userQuestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userQuestAfterInsertMu.Lock()
		userQuestAfterInsertHooks = append(userQuestAfterInsertHooks, userQuestHook)
		userQuestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userQuestBeforeUpdateMu.Lock()
		userQuestBeforeUpdateHooks = append(userQuestBeforeUpdateHooks, userQuestHook)
		userQuestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userQuestAfterUpdateMu.Lock()
		userQuestAfterUpdateHooks = append(userQuestAfterUpdateHooks, userQuestHook)
		userQuestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userQuestBeforeDeleteMu.Lock()
		userQuestBeforeDeleteHooks = append(userQuestBeforeDeleteHooks, userQuestHook)
		userQuestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userQuestAfterDeleteMu.Lock()
		userQuestAfterDeleteHooks = append(userQuestAfterDeleteHooks, userQuestHook)
		userQuestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userQuestBeforeUpsertMu.Lock()
		userQuestBeforeUpsertHooks = append(userQuestBeforeUpsertHooks, userQuestHook)
		userQuestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userQuestAfterUpsertMu.Lock()
		userQuestAfterUpsertHooks = append(userQuestAfterUpsertHooks, userQuestHook)
		userQuestAfterUpsertMu.Unlock()
	}
}

// One returns a single userQuest record from the query.
func (q userQuestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserQuest, error) {
	o := &UserQuest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for user_quests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserQuest records from the query.
func (q userQuestQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserQuestSlice, error) {
	var o []*UserQuest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UserQuest slice")
	}

	if len(userQuestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserQuest records in the query.
func (q userQuestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count user_quests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if user_quests exists")
	}

	return count > 0, nil
}

// UserQuests retrieves all the records using an executor.
func UserQuests(mods ...qm.QueryMod) userQuestQuery {
	mods = append(mods, qm.From("`user_quests`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_quests`.*"})
	}

	return userQuestQuery{q}
}

// FindUserQuest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserQuest(ctx context.Context, exec boil.ContextExecutor, iD uint64, selectCols ...string) (*UserQuest, error) {
	userQuestObj := &UserQuest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_quests` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userQuestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from user_quests")
	}

	if err = userQuestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userQuestObj, err
	}

	return userQuestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserQuest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_quests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userQuestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userQuestInsertCacheMut.RLock()
	cache, cached := userQuestInsertCache[key]
	userQuestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userQuestAllColumns,
			userQuestColumnsWithDefault,
			userQuestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userQuestType, userQuestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userQuestType, userQuestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_quests` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_quests` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_quests` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userQuestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into user_quests")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userQuestMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for user_quests")
	}

CacheNoHooks:
	if !cached {
		userQuestInsertCacheMut.Lock()
		userQuestInsertCache[key] = cache
		userQuestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserQuest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserQuest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userQuestUpdateCacheMut.RLock()
	cache, cached := userQuestUpdateCache[key]
	userQuestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userQuestAllColumns,
			userQuestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update user_quests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_quests` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userQuestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userQuestType, userQuestMapping, append(wl, userQuestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update user_quests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for user_quests")
	}

	if !cached {
		userQuestUpdateCacheMut.Lock()
		userQuestUpdateCache[key] = cache
		userQuestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for user_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for user_quests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserQuestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_quests` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userQuestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in userQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all userQuest")
	}
	return rowsAff, nil
}

var mySQLUserQuestUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserQuest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_quests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userQuestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserQuestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userQuestUpsertCacheMut.RLock()
	cache, cached := userQuestUpsertCache[key]
	userQuestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userQuestAllColumns,
			userQuestColumnsWithDefault,
			userQuestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userQuestAllColumns,
			userQuestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert user_quests, could not build update column list")
		}

		ret := strmangle.SetComplement(userQuestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_quests`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_quests` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userQuestType, userQuestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userQuestType, userQuestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for user_quests")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userQuestMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userQuestType, userQuestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for user_quests")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for user_quests")
	}

CacheNoHooks:
	if !cached {
		userQuestUpsertCacheMut.Lock()
		userQuestUpsertCache[key] = cache
		userQuestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserQuest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserQuest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UserQuest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userQuestPrimaryKeyMapping)
	sql := "DELETE FROM `user_quests` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from user_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for user_quests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no userQuestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from user_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_quests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserQuestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userQuestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_quests` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userQuestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from userQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_quests")
	}

	if len(userQuestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserQuest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserQuest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserQuestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserQuestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_quests`.* FROM `user_quests` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userQuestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UserQuestSlice")
	}

	*o = slice

	return nil
}

// UserQuestExists checks if the UserQuest row exists.
func UserQuestExists(ctx context.Context, exec boil.ContextExecutor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_quests` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if user_quests exists")
	}

	return exists, nil
}

// Exists checks if the UserQuest row exists.
func (o *UserQuest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserQuestExists(ctx, exec, o.ID)
}
