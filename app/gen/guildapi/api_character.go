/*
 * ギルド戦記API
 *
 * ゲーム「ギルド戦記」で使用するAPIの仕様書です.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package guildapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// CharacterAPIController binds http requests to an api service and writes the service results to the http response
type CharacterAPIController struct {
	service      CharacterAPIServicer
	errorHandler ErrorHandler
}

// CharacterAPIOption for how the controller is set up.
type CharacterAPIOption func(*CharacterAPIController)

// WithCharacterAPIErrorHandler inject ErrorHandler into controller
func WithCharacterAPIErrorHandler(h ErrorHandler) CharacterAPIOption {
	return func(c *CharacterAPIController) {
		c.errorHandler = h
	}
}

// NewCharacterAPIController creates a default api controller
func NewCharacterAPIController(s CharacterAPIServicer, opts ...CharacterAPIOption) Router {
	controller := &CharacterAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CharacterAPIController
func (c *CharacterAPIController) Routes() Routes {
	return Routes{
		"GetCharacters": Route{
			strings.ToUpper("Get"),
			"/v1/characters",
			c.GetCharacters,
		},
		"PostCharacters": Route{
			strings.ToUpper("Post"),
			"/v1/characters",
			c.PostCharacters,
		},
	}
}

// GetCharacters - キャラクター一覧取得
func (c *CharacterAPIController) GetCharacters(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCharacters(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostCharacters - キャラクター登録
func (c *CharacterAPIController) PostCharacters(w http.ResponseWriter, r *http.Request) {
	postCharactersRequestParam := PostCharactersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postCharactersRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostCharactersRequestRequired(postCharactersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostCharactersRequestConstraints(postCharactersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostCharacters(r.Context(), postCharactersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
