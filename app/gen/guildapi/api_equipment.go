/*
 * ギルド戦記API
 *
 * ゲーム「ギルド戦記」で使用するAPIの仕様書です.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package guildapi

import (
	"net/http"
	"strings"
)

// EquipmentAPIController binds http requests to an api service and writes the service results to the http response
type EquipmentAPIController struct {
	service      EquipmentAPIServicer
	errorHandler ErrorHandler
}

// EquipmentAPIOption for how the controller is set up.
type EquipmentAPIOption func(*EquipmentAPIController)

// WithEquipmentAPIErrorHandler inject ErrorHandler into controller
func WithEquipmentAPIErrorHandler(h ErrorHandler) EquipmentAPIOption {
	return func(c *EquipmentAPIController) {
		c.errorHandler = h
	}
}

// NewEquipmentAPIController creates a default api controller
func NewEquipmentAPIController(s EquipmentAPIServicer, opts ...EquipmentAPIOption) Router {
	controller := &EquipmentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EquipmentAPIController
func (c *EquipmentAPIController) Routes() Routes {
	return Routes{
		"V1EquipmentsGet": Route{
			strings.ToUpper("Get"),
			"/v1/equipments",
			c.V1EquipmentsGet,
		},
	}
}

// V1EquipmentsGet - 装備一覧取得
func (c *EquipmentAPIController) V1EquipmentsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.V1EquipmentsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
