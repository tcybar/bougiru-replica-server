/*
 * ギルド戦記API
 *
 * ゲーム「ギルド戦記」で使用するAPIの仕様書です.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package guildapi

import (
	"net/http"
	"strings"
)

// PartyAPIController binds http requests to an api service and writes the service results to the http response
type PartyAPIController struct {
	service      PartyAPIServicer
	errorHandler ErrorHandler
}

// PartyAPIOption for how the controller is set up.
type PartyAPIOption func(*PartyAPIController)

// WithPartyAPIErrorHandler inject ErrorHandler into controller
func WithPartyAPIErrorHandler(h ErrorHandler) PartyAPIOption {
	return func(c *PartyAPIController) {
		c.errorHandler = h
	}
}

// NewPartyAPIController creates a default api controller
func NewPartyAPIController(s PartyAPIServicer, opts ...PartyAPIOption) Router {
	controller := &PartyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PartyAPIController
func (c *PartyAPIController) Routes() Routes {
	return Routes{
		"GetParties": Route{
			strings.ToUpper("Get"),
			"/v1/parties",
			c.GetParties,
		},
	}
}

// GetParties - パーティ一覧取得
func (c *PartyAPIController) GetParties(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetParties(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
