/*
 * ギルド戦記API
 *
 * ゲーム「ギルド戦記」で使用するAPIの仕様書です.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package guildapi

import (
	"context"
	"net/http"
)

// CharacterAPIRouter defines the required methods for binding the api requests to a responses for the CharacterAPI
// The CharacterAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CharacterAPIServicer to perform the required actions, then write the service results to the http response.
type CharacterAPIRouter interface {
	GetCharacters(http.ResponseWriter, *http.Request)
	PostCharacters(http.ResponseWriter, *http.Request)
}

// EquipmentAPIRouter defines the required methods for binding the api requests to a responses for the EquipmentAPI
// The EquipmentAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EquipmentAPIServicer to perform the required actions, then write the service results to the http response.
type EquipmentAPIRouter interface {
	V1EquipmentsGet(http.ResponseWriter, *http.Request)
}

// PartyAPIRouter defines the required methods for binding the api requests to a responses for the PartyAPI
// The PartyAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PartyAPIServicer to perform the required actions, then write the service results to the http response.
type PartyAPIRouter interface {
	GetParties(http.ResponseWriter, *http.Request)
}

// QuestAPIRouter defines the required methods for binding the api requests to a responses for the QuestAPI
// The QuestAPIRouter implementation should parse necessary information from the http request,
// pass the data to a QuestAPIServicer to perform the required actions, then write the service results to the http response.
type QuestAPIRouter interface {
	V1QuestsGet(http.ResponseWriter, *http.Request)
}

// CharacterAPIServicer defines the api actions for the CharacterAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CharacterAPIServicer interface {
	GetCharacters(context.Context) (ImplResponse, error)
	PostCharacters(context.Context, PostCharactersRequest) (ImplResponse, error)
}

// EquipmentAPIServicer defines the api actions for the EquipmentAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EquipmentAPIServicer interface {
	V1EquipmentsGet(context.Context) (ImplResponse, error)
}

// PartyAPIServicer defines the api actions for the PartyAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PartyAPIServicer interface {
	GetParties(context.Context) (ImplResponse, error)
}

// QuestAPIServicer defines the api actions for the QuestAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type QuestAPIServicer interface {
	V1QuestsGet(context.Context) (ImplResponse, error)
}
